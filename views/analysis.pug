html
	head

		meta(charset="utf-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		link(rel="shortcut icon" type="image/png" href="")

		title Analysis

		script(src="/socket.io/socket.io.js")
		script(src="https://code.jquery.com/jquery-3.2.1.min.js",integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=", crossorigin="anonymous")

		style.
			html{
				font-family: Arial;
			}

			button{
				display: block;
			}

			header nav{
				text-align: center;
			}

			label{
				display: inline;
				padding: 8px;
				cursor: pointer;
				position: relative;
				overflow: hidden;
			}
			
			label > *{
				margin: 8px;
			}
			
			div.toggle-switch-board li{
				list-style: none;
			}

			div.toggle-switch-board li .color{
				display: inline-block;
				height: 16px;
				width: 16px;
				border-radius: 100%;
				*display:inline; /* ie 7 fix */
				vertical-align: top;
			}

			div.toggle-switch-board, canvas{
				float: left;
			}

			canvas{
				border: solid 1px lightgrey;
				border-radius:2px;
			}

			div.sliders{
				clear: both;
				float: left;
			}

			a{
				cursor: pointer;
			}

	body
		h1 Analysis

		button(id="create-files-btn") Create data files

		header

			nav

		div
			div(class="toggle-switch-board")

				a(href="#" class="toggle") toggle all
				ul

			canvas(id="canvas")

			div(class="sliders")
		
				label Scale x axis
				input(type="range" min="100" max="400" value="100" class="slider scale-x")

				label Scale y axis
				input(type="range" min="100" max="400" value="100" class="slider scale-y")

				label(for="chain") Chained
				input(type="checkbox" id="chain")


		script(type='text/javascript').

			const socket = io();
			const GESTURES = !{ JSON.stringify(GESTURES) }; //get GESTURES from server
			const ACTION = !{ JSON.stringify(ACTION) }; //get ACTION from server

			const collections = !{ JSON.stringify(collections) }; //get collections from server

			var canvas = document.getElementById('canvas');
			var ctx = canvas.getContext('2d');

			let h = 600;
			let w = 1000;

			canvas.width 		= w * getRatio(ctx);
			canvas.height 		= h * getRatio(ctx);
			canvas.style.width 	= w + 'px';
			canvas.style.height	= h + 'px';

			ctx.transform(1, 0, 0, -1, 0, canvas.height);

			sortedCollections = {};

			for (var i = 0; i < GESTURES.length; i++)
			{
				sortedCollections[GESTURES[i]] = collections.filter(pattern => 
					pattern.gesture_id == GESTURES[i]
				);
			}

			for(collection in sortedCollections)
			{
				let col = sortedCollections[collection];

				let l = $('<label />', {
					for : collection
				})
				.html(collection)
				.append(
					$('<input />', {
						type : 'radio',
						name : 'gesture',
						id : collection,
						checked : true
					})
				).appendTo('header nav');
			}

			showParticipants();

			function showParticipants()
			{
				//- clear(ctx);

				//- $('div.toggle-switch-board ul').remove();
				//- $('div.toggle-switch-board').append(
				//- 	$('<ul />')
				//- );

				let chosen = $('nav input:checked').attr('id');

				sortedCollections[chosen].forEach((elm, i) => {

					var color = '#' + intToRGB(hashCode(elm.calibration_id));

					$('div.toggle-switch-board ul').append(
						$('<li />')
						.append(
							$('<a />', {
								class : 'playback',
								'data-calibration-id' : elm.calibration_id
							}).html('&#9658;')
						).append(
							$('<label />', {
								for : elm.calibration_id
							})
							.append(
								$('<input />', {
									type : 'checkbox',
									id 	: elm.calibration_id,
									//- checked : true
								})
							).append(
								$('<span />', {
									class : 'color',
									style : 'background-color:'+color
								}).text(' ')
							).append(
								$('<span />').text(elm.calibration_id)
							)
						)
					);
				});
			}

			$('div.toggle-switch-board').on('change', 'input', toggleVibrationsPattern);
			$('nav input').on('change', toggleVibrationsPattern);

			function toggleVibrationsPattern()
			{
				clear(ctx);
				$('div.toggle-switch-board ul input:checked').each((i, elm) => {
					let chosen = $('nav input:checked').attr('id');

					let calibration = sortedCollections[chosen].filter(calibration => calibration.calibration_id == elm.id)[0];

					let amps = calibration.amplitudes;

					let color = '#' + intToRGB(hashCode(elm.id));

					ctx.strokeStyle = color;

					draw(ctx, amps);
				})
			}

			$('a.toggle').on('click', (e) => {
				e.preventDefault();

				var checked = $('div.toggle-switch-board ul input:checked');

				if(checked.length > 0)
				{
					checked.each((i, elm) => {
						elm.checked = false;
					})				
				}
				else
				{
					$('div.toggle-switch-board ul input').each((i, elm) => {
						elm.checked = true;
					})				
				}

				toggleVibrationsPattern();
			});

			$('input.slider').on('change', (e) => {

				if($('input#chain').is(':checked'))
				{
					let value = e.target.value;

					$('input.scale-x').val(value);
					$('input.scale-y').val(value);
				}

				toggleVibrationsPattern();
			});

			function clear(ctx)
			{
				ctx.clearRect(0,0,canvas.width,canvas.height);
			}

			function draw(ctx, points)
			{
				let scaleX = $('input.scale-x').val()/100;
				let scaleY = $('input.scale-y').val()/100;

				let span = 10;

				ctx.save();
				ctx.beginPath();
				//- ctx.lineWidth = 2;
				ctx.scale(scaleX,scaleY);

				ctx.moveTo(0, points[0]);

				for (j = 1; j < points.length; j ++)
				{
					let p1 = points[j];
					let p2 = (points[j + 1]) ? points[j + 1] : 0;
		
					var xc = (j * span + ((j + 1) * span)) / 2;
					var yc = (p1 + p2) / 2;
					ctx.quadraticCurveTo((j * span)+2, p1+2, xc+2, yc +2);
				}

				ctx.stroke();
				ctx.restore();
			}

			function getRatio(ctx)
			{
				var dpr = 	window.devicePixelRatio 			|| 1;
				var bsr = 	ctx.webkitBackingStorePixelRatio 	||
							ctx.mozBackingStorePixelRatio 		||
							ctx.msBackingStorePixelRatio 		||
							ctx.oBackingStorePixelRatio 		||
							ctx.backingStorePixelRatio 			|| 1;

				return dpr / bsr;
			};

			function hashCode(str)
			{
				var hash = 0;
				for (var i = 0; i < str.length; i++)
				{
					hash = str.charCodeAt(i) + ((hash << 5) - hash);
				}
				return hash;
			} 

			function intToRGB(i)
			{
				let c = (i & 0x00FFFFFF)
				.toString(16)
				.toUpperCase();

				return "00000".substring(0, 6 - c.length) + c;
			}

			$('a.playback').on('click', (e) => {

				const button = event.target || event.srcElement;

				$('a.playback').html('&#9658;');

				if(button.playback)
				{
					socket.emit(ACTION.STOP_PLAYBACK);
					button.playback = false;
				}
				else
				{
					button.innerHTML = '&#10074;&#10074;';
					button.playback = true;

					let gesture = $('nav input:checked').attr('id');

					let calibration_id = e.target.getAttribute('data-calibration-id');

					let calibration = sortedCollections[gesture].filter(calibration => calibration.calibration_id == calibration_id)[0];

					let amps = calibration.amplitudes;

					socket.emit(ACTION.ANALYTIC_PLAYBACK, {
						recording 	: amps
					});
				}
			});

			socket.on(ACTION.STOP_PLAYBACK, function(data)
			{
				$('a.playback').html('&#9658;');
			});

			document.getElementById('create-files-btn')
				.addEventListener('click', (event) =>
				{
					socket.emit(ACTION.CREATE_DATA_FILES);
				});