html
	head

		meta(charset="utf-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		link(rel="shortcut icon" type="image/png" href="")

		title Vibration recorder

		script(src="/socket.io/socket.io.js")

		style.
			html{
				font-family: Arial;
			}

			header{
				text-align: center;
			}

			header span{
				font-weight: bold;
			}

			#video{
				display: block;
				margin: 0 auto;
			}

			div.recorder,
			div.vibration{
				margin: 0 auto;
				padding: 32px;
				text-align: center;
			}

			button{
				padding: 8px 16px;
				font-size: 16px;
				margin: 4px;
			}
	body
		nav
			a(href="/calibrate") calibration
			|  
			a(href="/setup") setup
			|  
			a(href="#", id="reset") reset

		div
			header
				h1 Vibration recorder
				span #{ order.join(' - ') }

			div(id="video")

			div(class="recorder")
	
				button(id="record-btn") Record

			div(class="Vibration")
				button(id="playback-btn") Playback
				button(id="submit-btn") Submit
			
		script(type='text/javascript').

			const ACTION = !{ JSON.stringify(ACTION) }; //get ACTION from server
			const calibrated = !{ calibrated };
			const socket = io();

			document.getElementById('record-btn')
				.addEventListener('click', (event) =>
				{
					if(!calibrated)
					{
						alert('You need to calibrate');
						return;
					} 

					const button = event.target || event.srcElement;

					if(button.recording)
					{
						socket.emit(ACTION.STOP_RECORDING);
						button.innerHTML = 'Record';
						button.recording = false;
					}
					else
					{
						socket.emit(ACTION.RECORD);
						button.innerHTML = 'Stop';
						button.recording = true;
					}
				});

			document.getElementById('playback-btn')
				.addEventListener('click', (event) =>
				{
					const button = event.target || event.srcElement;

					if(button.playback)
					{
						socket.emit(ACTION.STOP_PLAYBACK);
						button.innerHTML = 'Playback';
						button.playback = false;
					}
					else
					{
						socket.emit(ACTION.PLAYBACK);
						button.innerHTML = 'Stop';
						button.playback = true;
					}
				});

			document.getElementById('submit-btn')
				.addEventListener('click', (event) =>
				{
					event.preventDefault();
					socket.emit(ACTION.SUBMIT);
				});

			document.getElementById('reset')
				.addEventListener('click', (event) =>
				{
					socket.emit(ACTION.RESET);
					window.location.href = '/';
				});

			socket.on(ACTION.NEXT_GESTURE, function(data)
			{
				player.cueVideoById(data.gesture);
			});

			socket.on(ACTION.STOP_PLAYBACK, function(data)
			{
				let button = document.getElementById('playback-btn');
				button.innerHTML = 'Playback';
				button.playback = false;
			});

			socket.on(ACTION.STOP_RECORDING, function(data)
			{
				let button = document.getElementById('record-btn');
				button.innerHTML = 'Record';
				button.recording = false;
			});

			socket.on(ACTION.DONE, function(data)
			{
				window.location.href = '/thanks';
			});

			// Load the IFrame Player API code asynchronously.
			var tag = document.createElement('script');
			tag.src = "https://www.youtube.com/player_api";
			var firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

			var player;
			function onYouTubePlayerAPIReady()
			{
				player = new YT.Player('video', {
					height: '360',
					width: '640',
					playerVars: {
						showinfo: 0,
						autoplay : 0,
						rel : 0,
					},
					videoId: '!{ currentGesture }'
				});
			}

